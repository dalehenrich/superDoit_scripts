#!/usr/bin/env superdoit_stone
usage
-----
USAGE $basename [--help | -h] [--debug | -D] <command> [-- [<stone-name> [<topaz-command-line-args>] ] ]

DESCRIPTION
  I needed to compare the symbol dictionary and Rowan project environment between
  SystemUser and DataCurator in a stone where Jadeite wasn't functional ...
  basically a set of named doits in one file instead of 5 separate input files.

OPTIONS
  <stone-name>               Name of the GsDevKit_home stone. <stone-name> argument
                             may be skipped if the script is run in a GsDevKit_home
                             stone directory (i.e., $GS_HOME/server/stones/<stone-name>
  <topaz-command-line-args>  topaz options that should be passed to topaz when running
                             running the script
  -h, --help                 display usage message
  -D, --debug                bring up topaz debugger in the event of a script error

EXAMPLES
  $basename --help
  $basename -h
  $basename --debug
  $basename -D

  $basename symboldicts 
  $basename keys <symbol-dict-name>
  $basename projectNames
  $basename project <project-name>
  $basename unload <project-name>
-----
%
method
_testStatsError: message
	self usage.
	self stderr nextPutAll: '------------------------------'; lf.
	self stderr nextPutAll: message; lf.
	self stderr nextPutAll: '------------------------------'; lf.
	^ self exitWithStatus: 1 
%
method
doProjectNames
	Rowan projectNames do: [:each |
		self stdout tab; nextPutAll: each; lf ].
	^ self noResult
%
method
doSymbolDicts
	System myUserProfile symbolList do: [:each |
		self stdout tab; nextPutAll: each name; tab; nextPutAll: each asOop printString; lf ].
	^ self noResult
%
method
doKeys: symbolDictName
	| dict |
	dict := System myUserProfile symbolList objectNamed: symbolDictName asSymbol.
	self stdout tab; nextPutAll: symbolDictName; tab; nextPutAll: dict asOop printString; lf.
	self stdout tab; nextPutAll: '-------'; lf.
	dict
		keysAndValuesDo: [:key :value | self stdout tab; nextPutAll: key; tab; nextPutAll: value asOop printString lf ].
	^ self noResult
%
method
doProject: projectName
	| project |
	project := Rowan projectNamed: projectName.
	self stdout nextPutAll: project printString; tab; nextPutAll: project asOop printString; lf.
	^ self noResult
%
method
doProjectUnload: projectName
	(Rowan projectNamed: projectName) unload.
	^ self noResult
%
doit
	| command |
	self stdout nextPutAll: '---'; lf.
	self stdout nextPutAll: System myUserProfile userId; lf.
	self stdout nextPutAll: '---'; lf.
	command := (self positionalArgs atOrNil: 1)
		ifNotNil: [:arg | command := arg asLowercase ]
		ifNil: [ ^ self _testStatsError: 'No command specified' ].
	command = 'symboldicts' ifTrue: [ ^ self doSymbolDicts ].
	command = 'keys' ifTrue: [ ^ self doKeys: (self positionalArgs atOrNil: 2) ].
	command = 'projectnames' ifTrue: [ ^ self doProjectNames ].
	command = 'project' ifTrue: [ ^ self doProject: (self positionalArgs atOrNil: 2) ].
	command = 'unload' ifTrue: [ ^ self doProjectUnload: (self positionalArgs atOrNil: 2) ].
	^ self _testStatsError: 'Unknown command ', command printString, ' specified'
%
